import { getRandomIndex } from "../utils.js";
import { CityExploiter } from "./CityExploiter.js";
import { Map } from "./Map.js";
import { MapGenerator } from "./MapGenerator.js";
import { TileExploiter } from "./TileExploiter.js";

/**
 * @typedef {{type: TypeAction, tile: TileExploiter | null, turn: Number}} Action
 */
export class MapExploiter extends Map {
  static pop = {
    destroy: 0,
    hunting: 1,
    harvest: 1,
    farm: 2,
    mine: 2,
    "lumber hut": 1,
    "mountain temple": 1,
    "forest temple": 1,
    temple: 1,
    "clear forest": 0,
    "grow forest": 0,
    "burn forest": 0,
  };
  static cost = {
    destroy: 0,
    hunting: 2,
    harvest: 2,
    farm: 5,
    mine: 5,
    "lumber hut": 3,
    "mountain temple": 20,
    "forest temple": 15,
    temple: 20,
    "clear forest": -1,
    "grow forest": 5,
    "burn forest": 5,
  };

  /** @type {Number} */
  #turn;
  /** @type {Number} */
  #populations;
  /** @type {Number} */
  #stars;
  /** @type {Number} */
  #stars_production;

  /** @type {CityExploiter[]} */
  cities = [];
  /** @type {Action[]} */
  actions = [];

  /**
   * @param {MapGenerator} map
   */
  constructor(map) {
    super(map.size);
    this.map = Array.from({ length: this.size ** 2 }, (_, i) => {
      const tile = new TileExploiter(map.map[i]);
      if (map.map[i].isCapitalCity) {
        if (this.cities.length === 0) this.cities.push(new CityExploiter(tile));
        else this.cities[0].addTile(tile);
      }
      return tile;
    });
    this.map.forEach((tile) => tile);
  }

  get turn() {
    return this.#turn;
  }
  get populations() {
    return this.#populations;
  }
  get stars() {
    return this.#stars;
  }
  get stars_production() {
    return this.#stars_production;
  }

  set turn(value) {
    this.#turn = value;
    document.getElementById("turn").innerHTML = this.#turn;
  }
  set populations(value) {
    this.#populations = value;
    document.getElementById("populations").innerHTML = this.#populations;
  }
  set stars(value) {
    this.#stars = value;
    document.getElementById("stars").innerHTML = this.#stars;
  }
  set stars_production(value) {
    this.#stars_production = value;
    document.getElementById("stars_production").innerHTML = this.#stars_production;
  }

  _calculatePopulations() {
    let populations = 0;
    this.cities.forEach((city) => (populations += city.total_populations));
    return populations;
  }
  _calculateStarsProduction() {
    let stars_production = 0;
    this.cities.forEach((city) => (stars_production += city.stars_production));
    return stars_production;
  }

  start() {
    this.turn = 0;
    this.populations = 0;
    this.stars = 5;
    this.stars_production = 2;
  }

  endTurn() {
    this.actions.push("end turn");
    this.turn++;
    this.stars += this.stars_production;
  }

  _getRandomNextAction() {
    /** @type {Action[]} */
    let actionsPossible = [{ tile: null, type: "end turn", turn: this.#turn }];
    this.map.forEach((tile) => {
      if (tile.actionsPossible.length !== 0)
        actionsPossible.push({
          tile: tile,
          type: tile.actionsPossible[getRandomIndex(tile.actionsPossible)],
          turn: this.#turn,
        });
    });
    return actionsPossible[getRandomIndex(actionsPossible)];
  }

  next() {
    this.cities.forEach((city) => city.tiles.forEach((tile) => tile.defineActionsPossible(this.stars)));
    let nextAction = this._getRandomNextAction();
    console.log(nextAction);
    if (nextAction.type === "end turn") this.endTurn();
    else {
      nextAction.tile.applyAction(nextAction.type);
      this.stars -= MapExploiter.cost[nextAction.type];
      const city = this.cities.find((city) => city.city_id === nextAction.tile.city_id);
      if (city) city.addPopulations(MapExploiter.pop[nextAction.type], this);

      this.populations = this._calculatePopulations();
      this.stars_production = this._calculateStarsProduction();
    }
  }
}
